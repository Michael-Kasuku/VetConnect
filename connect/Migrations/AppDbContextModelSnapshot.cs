// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using connect.Pages.Models;

#nullable disable

namespace connect.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("connect.Pages.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Guest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GuestUserUserId")
                        .HasColumnType("int");

                    b.Property<int>("Host")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("GuestUserUserId");

                    b.HasIndex("Host");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("connect.Pages.Models.DeliveryPoint", b =>
                {
                    b.Property<int>("DeliveryPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryPointId"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryFee")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryPointId");

                    b.HasIndex("AddedBy");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryPoints");
                });

            modelBuilder.Entity("connect.Pages.Models.EduContent", b =>
                {
                    b.Property<int>("EduContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EduContentId"));

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostedBy")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EduContentId");

                    b.HasIndex("PostedBy");

                    b.HasIndex("UserId");

                    b.ToTable("EduContents");
                });

            modelBuilder.Entity("connect.Pages.Models.EmailAddressOTP", b =>
                {
                    b.Property<int>("EmailAddressOtpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailAddressOtpId"));

                    b.Property<int>("BelongingTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeGenerated")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailAddressOtpId");

                    b.HasIndex("BelongingTo");

                    b.ToTable("EmailAddressOTPs");
                });

            modelBuilder.Entity("connect.Pages.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Guest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GuestUserUserId")
                        .HasColumnType("int");

                    b.Property<int>("Host")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("GuestUserUserId");

                    b.HasIndex("Host");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("connect.Pages.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeSent")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("connect.Pages.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("DeliveredAt")
                        .HasColumnType("int");

                    b.Property<bool>("DeliveryStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExpectedDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("Payment")
                        .HasColumnType("real");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("bit");

                    b.Property<int>("PlacedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductOrdered")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeDelivered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeOrdered")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("DeliveredAt");

                    b.HasIndex("PlacedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductOrdered");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("connect.Pages.Models.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.HasKey("PackageId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("connect.Pages.Models.PhoneNumber", b =>
                {
                    b.Property<int>("PhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneNumberId"));

                    b.Property<int>("OwnedBy")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberVerified")
                        .HasColumnType("bit");

                    b.HasKey("PhoneNumberId");

                    b.HasIndex("OwnedBy");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("connect.Pages.Models.PhoneNumberOTP", b =>
                {
                    b.Property<int>("PhoneNumberOtpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneNumberOtpId"));

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SentTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeGenerated")
                        .HasColumnType("datetime2");

                    b.HasKey("PhoneNumberOtpId");

                    b.HasIndex("SentTo");

                    b.ToTable("PhoneNumberOTPs");
                });

            modelBuilder.Entity("connect.Pages.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("BelongingTo")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Owner")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProductPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BelongingTo");

                    b.HasIndex("Owner");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("connect.Pages.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("connect.Pages.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("connect.Pages.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("OfferedBy")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId");

                    b.HasIndex("OfferedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("connect.Pages.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscribedTo")
                        .HasColumnType("int");

                    b.Property<int>("Subscriber")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SubscriptionStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("PackageId");

                    b.HasIndex("SubscribedTo");

                    b.HasIndex("Subscriber");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("connect.Pages.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<bool>("AccountActivationStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("AvailabilityStatus")
                        .HasColumnType("bit");

                    b.Property<string>("BioData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentRole")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailAddressConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LicenseCopyApprovalStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("VetLicenseCopy")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UserId");

                    b.HasIndex("CurrentRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("connect.Pages.Models.Webinar", b =>
                {
                    b.Property<int>("WebinarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WebinarId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostedBy")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WebinarId");

                    b.HasIndex("PostedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Webinars");
                });

            modelBuilder.Entity("connect.Pages.Models.Appointment", b =>
                {
                    b.HasOne("connect.Pages.Models.User", "GuestUser")
                        .WithMany()
                        .HasForeignKey("GuestUserUserId");

                    b.HasOne("connect.Pages.Models.User", "HostUser")
                        .WithMany()
                        .HasForeignKey("Host")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuestUser");

                    b.Navigation("HostUser");
                });

            modelBuilder.Entity("connect.Pages.Models.DeliveryPoint", b =>
                {
                    b.HasOne("connect.Pages.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("connect.Pages.Models.User", null)
                        .WithMany("DeliveryPointsAdded")
                        .HasForeignKey("UserId");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("connect.Pages.Models.EduContent", b =>
                {
                    b.HasOne("connect.Pages.Models.User", "PostedByUser")
                        .WithMany()
                        .HasForeignKey("PostedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("connect.Pages.Models.User", null)
                        .WithMany("EduContentsPosted")
                        .HasForeignKey("UserId");

                    b.Navigation("PostedByUser");
                });

            modelBuilder.Entity("connect.Pages.Models.EmailAddressOTP", b =>
                {
                    b.HasOne("connect.Pages.Models.User", "User")
                        .WithMany("EmailAddressOTPs")
                        .HasForeignKey("BelongingTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("connect.Pages.Models.Event", b =>
                {
                    b.HasOne("connect.Pages.Models.User", "GuestUser")
                        .WithMany("EventsHosted")
                        .HasForeignKey("GuestUserUserId");

                    b.HasOne("connect.Pages.Models.User", "HostUser")
                        .WithMany()
                        .HasForeignKey("Host")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuestUser");

                    b.Navigation("HostUser");
                });

            modelBuilder.Entity("connect.Pages.Models.Order", b =>
                {
                    b.HasOne("connect.Pages.Models.DeliveryPoint", null)
                        .WithMany()
                        .HasForeignKey("DeliveredAt")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("connect.Pages.Models.User", "PlacedByUser")
                        .WithMany()
                        .HasForeignKey("PlacedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("connect.Pages.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("connect.Pages.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductOrdered")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("connect.Pages.Models.User", null)
                        .WithMany("OrdersPlaced")
                        .HasForeignKey("UserId");

                    b.Navigation("PlacedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("connect.Pages.Models.PhoneNumber", b =>
                {
                    b.HasOne("connect.Pages.Models.User", "User")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("OwnedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("connect.Pages.Models.PhoneNumberOTP", b =>
                {
                    b.HasOne("connect.Pages.Models.User", "User")
                        .WithMany("PhoneNumberOTPs")
                        .HasForeignKey("SentTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("connect.Pages.Models.Product", b =>
                {
                    b.HasOne("connect.Pages.Models.ProductCategory", null)
                        .WithMany()
                        .HasForeignKey("BelongingTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("connect.Pages.Models.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("Owner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("connect.Pages.Models.User", null)
                        .WithMany("ProductsOwned")
                        .HasForeignKey("UserId");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("connect.Pages.Models.Service", b =>
                {
                    b.HasOne("connect.Pages.Models.User", "OfferedByUser")
                        .WithMany()
                        .HasForeignKey("OfferedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("connect.Pages.Models.User", null)
                        .WithMany("ServicesOffered")
                        .HasForeignKey("UserId");

                    b.Navigation("OfferedByUser");
                });

            modelBuilder.Entity("connect.Pages.Models.Subscription", b =>
                {
                    b.HasOne("connect.Pages.Models.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId");

                    b.HasOne("connect.Pages.Models.Package", null)
                        .WithMany()
                        .HasForeignKey("SubscribedTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("connect.Pages.Models.User", "SubscriberUser")
                        .WithMany()
                        .HasForeignKey("Subscriber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("connect.Pages.Models.User", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId");

                    b.Navigation("Package");

                    b.Navigation("SubscriberUser");
                });

            modelBuilder.Entity("connect.Pages.Models.User", b =>
                {
                    b.HasOne("connect.Pages.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("CurrentRole")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("connect.Pages.Models.Webinar", b =>
                {
                    b.HasOne("connect.Pages.Models.User", "PostedByUser")
                        .WithMany()
                        .HasForeignKey("PostedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("connect.Pages.Models.User", null)
                        .WithMany("WebinarsPosted")
                        .HasForeignKey("UserId");

                    b.Navigation("PostedByUser");
                });

            modelBuilder.Entity("connect.Pages.Models.User", b =>
                {
                    b.Navigation("DeliveryPointsAdded");

                    b.Navigation("EduContentsPosted");

                    b.Navigation("EmailAddressOTPs");

                    b.Navigation("EventsHosted");

                    b.Navigation("OrdersPlaced");

                    b.Navigation("PhoneNumberOTPs");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("ProductsOwned");

                    b.Navigation("ServicesOffered");

                    b.Navigation("Subscriptions");

                    b.Navigation("WebinarsPosted");
                });
#pragma warning restore 612, 618
        }
    }
}
